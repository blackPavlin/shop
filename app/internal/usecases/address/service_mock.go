// Code generated by MockGen. DO NOT EDIT.
// Source: address.go

// Package address is a generated GoMock package.
package address

import (
	context "context"
	reflect "reflect"

	entities "github.com/blackPavlin/shop/app/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockAddressService is a mock of AddressService interface.
type MockAddressService struct {
	ctrl     *gomock.Controller
	recorder *MockAddressServiceMockRecorder
}

// MockAddressServiceMockRecorder is the mock recorder for MockAddressService.
type MockAddressServiceMockRecorder struct {
	mock *MockAddressService
}

// NewMockAddressService creates a new mock instance.
func NewMockAddressService(ctrl *gomock.Controller) *MockAddressService {
	mock := &MockAddressService{ctrl: ctrl}
	mock.recorder = &MockAddressServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressService) EXPECT() *MockAddressServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAddressService) Create(ctx context.Context, address *entities.Address) (entities.AddressID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, address)
	ret0, _ := ret[0].(entities.AddressID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAddressServiceMockRecorder) Create(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAddressService)(nil).Create), ctx, address)
}

// DeleteByID mocks base method.
func (m *MockAddressService) DeleteByID(ctx context.Context, userID entities.UserID, id entities.AddressID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockAddressServiceMockRecorder) DeleteByID(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockAddressService)(nil).DeleteByID), ctx, userID, id)
}

// FindByID mocks base method.
func (m *MockAddressService) FindByID(ctx context.Context, userID entities.UserID, id entities.AddressID) (*entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, userID, id)
	ret0, _ := ret[0].(*entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAddressServiceMockRecorder) FindByID(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAddressService)(nil).FindByID), ctx, userID, id)
}

// FindByUserID mocks base method.
func (m *MockAddressService) FindByUserID(ctx context.Context, userID entities.UserID) ([]*entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].([]*entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockAddressServiceMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockAddressService)(nil).FindByUserID), ctx, userID)
}
