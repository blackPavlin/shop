directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Address implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  userID: ID!
  city: String!
  country: String!
  flat: Int
  house: Int!
  letter: String
  postcode: Int!
  street: String!
  users: User!
}
"""
AddressWhereInput is used for filtering Address objects.
Input was generated by ent.
"""
input AddressWhereInput {
  not: AddressWhereInput
  and: [AddressWhereInput!]
  or: [AddressWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """city field predicates"""
  city: String
  cityNEQ: String
  cityIn: [String!]
  cityNotIn: [String!]
  cityGT: String
  cityGTE: String
  cityLT: String
  cityLTE: String
  cityContains: String
  cityHasPrefix: String
  cityHasSuffix: String
  cityEqualFold: String
  cityContainsFold: String
  """country field predicates"""
  country: String
  countryNEQ: String
  countryIn: [String!]
  countryNotIn: [String!]
  countryGT: String
  countryGTE: String
  countryLT: String
  countryLTE: String
  countryContains: String
  countryHasPrefix: String
  countryHasSuffix: String
  countryEqualFold: String
  countryContainsFold: String
  """flat field predicates"""
  flat: Int
  flatNEQ: Int
  flatIn: [Int!]
  flatNotIn: [Int!]
  flatGT: Int
  flatGTE: Int
  flatLT: Int
  flatLTE: Int
  flatIsNil: Boolean
  flatNotNil: Boolean
  """house field predicates"""
  house: Int
  houseNEQ: Int
  houseIn: [Int!]
  houseNotIn: [Int!]
  houseGT: Int
  houseGTE: Int
  houseLT: Int
  houseLTE: Int
  """letter field predicates"""
  letter: String
  letterNEQ: String
  letterIn: [String!]
  letterNotIn: [String!]
  letterGT: String
  letterGTE: String
  letterLT: String
  letterLTE: String
  letterContains: String
  letterHasPrefix: String
  letterHasSuffix: String
  letterIsNil: Boolean
  letterNotNil: Boolean
  letterEqualFold: String
  letterContainsFold: String
  """postcode field predicates"""
  postcode: Int
  postcodeNEQ: Int
  postcodeIn: [Int!]
  postcodeNotIn: [Int!]
  postcodeGT: Int
  postcodeGTE: Int
  postcodeLT: Int
  postcodeLTE: Int
  """street field predicates"""
  street: String
  streetNEQ: String
  streetIn: [String!]
  streetNotIn: [String!]
  streetGT: String
  streetGTE: String
  streetLT: String
  streetLTE: String
  streetContains: String
  streetHasPrefix: String
  streetHasSuffix: String
  streetEqualFold: String
  streetContainsFold: String
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
type Cart implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  userID: ID!
  productID: ID!
  amount: Int!
  users: User!
  products: Product!
}
"""
CartWhereInput is used for filtering Cart objects.
Input was generated by ent.
"""
input CartWhereInput {
  not: CartWhereInput
  and: [CartWhereInput!]
  or: [CartWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """product_id field predicates"""
  productID: ID
  productIDNEQ: ID
  productIDIn: [ID!]
  productIDNotIn: [ID!]
  """amount field predicates"""
  amount: Int
  amountNEQ: Int
  amountIn: [Int!]
  amountNotIn: [Int!]
  amountGT: Int
  amountGTE: Int
  amountLT: Int
  amountLTE: Int
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """products edge predicates"""
  hasProducts: Boolean
  hasProductsWith: [ProductWhereInput!]
}
type Category implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  products: [Product!]
}
"""
CategoryWhereInput is used for filtering Category objects.
Input was generated by ent.
"""
input CategoryWhereInput {
  not: CategoryWhereInput
  and: [CategoryWhereInput!]
  or: [CategoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """products edge predicates"""
  hasProducts: Boolean
  hasProductsWith: [ProductWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/blackPavlin/shop/ent.Noder") {
  """The id of the object."""
  id: ID!
}
type Order implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  userID: ID!
  users: User!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
OrderWhereInput is used for filtering Order objects.
Input was generated by ent.
"""
input OrderWhereInput {
  not: OrderWhereInput
  and: [OrderWhereInput!]
  or: [OrderWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Product implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  description: String
  categoryID: ID!
  categories: Category!
  carts: [Cart!]
}
"""
ProductWhereInput is used for filtering Product objects.
Input was generated by ent.
"""
input ProductWhereInput {
  not: ProductWhereInput
  and: [ProductWhereInput!]
  or: [ProductWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """category_id field predicates"""
  categoryID: ID
  categoryIDNEQ: ID
  categoryIDIn: [ID!]
  categoryIDNotIn: [ID!]
  """categories edge predicates"""
  hasCategories: Boolean
  hasCategoriesWith: [CategoryWhereInput!]
  """carts edge predicates"""
  hasCarts: Boolean
  hasCartsWith: [CartWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
}
"""The builtin Time type"""
scalar Time
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  phone: String!
  email: String!
  role: UserRole!
  addresses: [Address!]
  carts: [Cart!]
  orders: [Order!]
}
"""UserRole is enum for the field role"""
enum UserRole @goModel(model: "github.com/blackPavlin/shop/ent/user.Role") {
  ADMIN
  USER
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """phone field predicates"""
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneEqualFold: String
  phoneContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """role field predicates"""
  role: UserRole
  roleNEQ: UserRole
  roleIn: [UserRole!]
  roleNotIn: [UserRole!]
  """addresses edge predicates"""
  hasAddresses: Boolean
  hasAddressesWith: [AddressWhereInput!]
  """carts edge predicates"""
  hasCarts: Boolean
  hasCartsWith: [CartWhereInput!]
  """orders edge predicates"""
  hasOrders: Boolean
  hasOrdersWith: [OrderWhereInput!]
}
