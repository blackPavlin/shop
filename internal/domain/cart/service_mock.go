// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package cart is a generated GoMock package.
package cart

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartService is a mock of CartService interface.
type MockCartService struct {
	ctrl     *gomock.Controller
	recorder *MockCartServiceMockRecorder
}

// MockCartServiceMockRecorder is the mock recorder for MockCartService.
type MockCartServiceMockRecorder struct {
	mock *MockCartService
}

// NewMockCartService creates a new mock instance.
func NewMockCartService(ctrl *gomock.Controller) *MockCartService {
	mock := &MockCartService{ctrl: ctrl}
	mock.recorder = &MockCartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartService) EXPECT() *MockCartServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCartService) Create(ctx context.Context, props *Props) (*Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, props)
	ret0, _ := ret[0].(*Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCartServiceMockRecorder) Create(ctx, props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCartService)(nil).Create), ctx, props)
}

// Query mocks base method.
func (m *MockCartService) Query(ctx context.Context, criteria *QueryCriteria) (*QueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, criteria)
	ret0, _ := ret[0].(*QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockCartServiceMockRecorder) Query(ctx, criteria interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCartService)(nil).Query), ctx, criteria)
}
