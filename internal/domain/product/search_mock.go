// Code generated by MockGen. DO NOT EDIT.
// Source: search.go
//
// Generated by this command:
//
//	mockgen -source search.go -destination search_mock.go -package product
//

// Package product is a generated GoMock package.
package product

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSearchEngine is a mock of SearchEngine interface.
type MockSearchEngine struct {
	ctrl     *gomock.Controller
	recorder *MockSearchEngineMockRecorder
}

// MockSearchEngineMockRecorder is the mock recorder for MockSearchEngine.
type MockSearchEngineMockRecorder struct {
	mock *MockSearchEngine
}

// NewMockSearchEngine creates a new mock instance.
func NewMockSearchEngine(ctrl *gomock.Controller) *MockSearchEngine {
	mock := &MockSearchEngine{ctrl: ctrl}
	mock.recorder = &MockSearchEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchEngine) EXPECT() *MockSearchEngineMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockSearchEngine) Index(ctx context.Context, products Products) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockSearchEngineMockRecorder) Index(ctx, products any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockSearchEngine)(nil).Index), ctx, products)
}

// Search mocks base method.
func (m *MockSearchEngine) Search(ctx context.Context, criteria *SearchQueryCriteria) (*SearchQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, criteria)
	ret0, _ := ret[0].(*SearchQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearchEngineMockRecorder) Search(ctx, criteria any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchEngine)(nil).Search), ctx, criteria)
}
