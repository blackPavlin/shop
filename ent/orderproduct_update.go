// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blackPavlin/shop/ent/order"
	"github.com/blackPavlin/shop/ent/orderproduct"
	"github.com/blackPavlin/shop/ent/predicate"
	"github.com/blackPavlin/shop/ent/product"
)

// OrderProductUpdate is the builder for updating OrderProduct entities.
type OrderProductUpdate struct {
	config
	hooks    []Hook
	mutation *OrderProductMutation
}

// Where appends a list predicates to the OrderProductUpdate builder.
func (opu *OrderProductUpdate) Where(ps ...predicate.OrderProduct) *OrderProductUpdate {
	opu.mutation.Where(ps...)
	return opu
}

// SetUpdatedAt sets the "updated_at" field.
func (opu *OrderProductUpdate) SetUpdatedAt(t time.Time) *OrderProductUpdate {
	opu.mutation.SetUpdatedAt(t)
	return opu
}

// SetOrderID sets the "order_id" field.
func (opu *OrderProductUpdate) SetOrderID(i int64) *OrderProductUpdate {
	opu.mutation.SetOrderID(i)
	return opu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (opu *OrderProductUpdate) SetNillableOrderID(i *int64) *OrderProductUpdate {
	if i != nil {
		opu.SetOrderID(*i)
	}
	return opu
}

// SetProductID sets the "product_id" field.
func (opu *OrderProductUpdate) SetProductID(i int64) *OrderProductUpdate {
	opu.mutation.SetProductID(i)
	return opu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (opu *OrderProductUpdate) SetNillableProductID(i *int64) *OrderProductUpdate {
	if i != nil {
		opu.SetProductID(*i)
	}
	return opu
}

// SetAmount sets the "amount" field.
func (opu *OrderProductUpdate) SetAmount(i int64) *OrderProductUpdate {
	opu.mutation.ResetAmount()
	opu.mutation.SetAmount(i)
	return opu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (opu *OrderProductUpdate) SetNillableAmount(i *int64) *OrderProductUpdate {
	if i != nil {
		opu.SetAmount(*i)
	}
	return opu
}

// AddAmount adds i to the "amount" field.
func (opu *OrderProductUpdate) AddAmount(i int64) *OrderProductUpdate {
	opu.mutation.AddAmount(i)
	return opu
}

// SetPrice sets the "price" field.
func (opu *OrderProductUpdate) SetPrice(i int64) *OrderProductUpdate {
	opu.mutation.ResetPrice()
	opu.mutation.SetPrice(i)
	return opu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (opu *OrderProductUpdate) SetNillablePrice(i *int64) *OrderProductUpdate {
	if i != nil {
		opu.SetPrice(*i)
	}
	return opu
}

// AddPrice adds i to the "price" field.
func (opu *OrderProductUpdate) AddPrice(i int64) *OrderProductUpdate {
	opu.mutation.AddPrice(i)
	return opu
}

// SetOrdersID sets the "orders" edge to the Order entity by ID.
func (opu *OrderProductUpdate) SetOrdersID(id int64) *OrderProductUpdate {
	opu.mutation.SetOrdersID(id)
	return opu
}

// SetOrders sets the "orders" edge to the Order entity.
func (opu *OrderProductUpdate) SetOrders(o *Order) *OrderProductUpdate {
	return opu.SetOrdersID(o.ID)
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (opu *OrderProductUpdate) SetProductsID(id int64) *OrderProductUpdate {
	opu.mutation.SetProductsID(id)
	return opu
}

// SetProducts sets the "products" edge to the Product entity.
func (opu *OrderProductUpdate) SetProducts(p *Product) *OrderProductUpdate {
	return opu.SetProductsID(p.ID)
}

// Mutation returns the OrderProductMutation object of the builder.
func (opu *OrderProductUpdate) Mutation() *OrderProductMutation {
	return opu.mutation
}

// ClearOrders clears the "orders" edge to the Order entity.
func (opu *OrderProductUpdate) ClearOrders() *OrderProductUpdate {
	opu.mutation.ClearOrders()
	return opu
}

// ClearProducts clears the "products" edge to the Product entity.
func (opu *OrderProductUpdate) ClearProducts() *OrderProductUpdate {
	opu.mutation.ClearProducts()
	return opu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opu *OrderProductUpdate) Save(ctx context.Context) (int, error) {
	opu.defaults()
	return withHooks(ctx, opu.sqlSave, opu.mutation, opu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opu *OrderProductUpdate) SaveX(ctx context.Context) int {
	affected, err := opu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opu *OrderProductUpdate) Exec(ctx context.Context) error {
	_, err := opu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opu *OrderProductUpdate) ExecX(ctx context.Context) {
	if err := opu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opu *OrderProductUpdate) defaults() {
	if _, ok := opu.mutation.UpdatedAt(); !ok {
		v := orderproduct.UpdateDefaultUpdatedAt()
		opu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opu *OrderProductUpdate) check() error {
	if v, ok := opu.mutation.Amount(); ok {
		if err := orderproduct.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "OrderProduct.amount": %w`, err)}
		}
	}
	if v, ok := opu.mutation.Price(); ok {
		if err := orderproduct.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "OrderProduct.price": %w`, err)}
		}
	}
	if _, ok := opu.mutation.OrdersID(); opu.mutation.OrdersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderProduct.orders"`)
	}
	if _, ok := opu.mutation.ProductsID(); opu.mutation.ProductsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderProduct.products"`)
	}
	return nil
}

func (opu *OrderProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := opu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderproduct.Table, orderproduct.Columns, sqlgraph.NewFieldSpec(orderproduct.FieldID, field.TypeInt64))
	if ps := opu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opu.mutation.UpdatedAt(); ok {
		_spec.SetField(orderproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := opu.mutation.Amount(); ok {
		_spec.SetField(orderproduct.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := opu.mutation.AddedAmount(); ok {
		_spec.AddField(orderproduct.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := opu.mutation.Price(); ok {
		_spec.SetField(orderproduct.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := opu.mutation.AddedPrice(); ok {
		_spec.AddField(orderproduct.FieldPrice, field.TypeInt64, value)
	}
	if opu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.OrdersTable,
			Columns: []string{orderproduct.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.OrdersTable,
			Columns: []string{orderproduct.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.ProductsTable,
			Columns: []string{orderproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.ProductsTable,
			Columns: []string{orderproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, opu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	opu.mutation.done = true
	return n, nil
}

// OrderProductUpdateOne is the builder for updating a single OrderProduct entity.
type OrderProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderProductMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (opuo *OrderProductUpdateOne) SetUpdatedAt(t time.Time) *OrderProductUpdateOne {
	opuo.mutation.SetUpdatedAt(t)
	return opuo
}

// SetOrderID sets the "order_id" field.
func (opuo *OrderProductUpdateOne) SetOrderID(i int64) *OrderProductUpdateOne {
	opuo.mutation.SetOrderID(i)
	return opuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (opuo *OrderProductUpdateOne) SetNillableOrderID(i *int64) *OrderProductUpdateOne {
	if i != nil {
		opuo.SetOrderID(*i)
	}
	return opuo
}

// SetProductID sets the "product_id" field.
func (opuo *OrderProductUpdateOne) SetProductID(i int64) *OrderProductUpdateOne {
	opuo.mutation.SetProductID(i)
	return opuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (opuo *OrderProductUpdateOne) SetNillableProductID(i *int64) *OrderProductUpdateOne {
	if i != nil {
		opuo.SetProductID(*i)
	}
	return opuo
}

// SetAmount sets the "amount" field.
func (opuo *OrderProductUpdateOne) SetAmount(i int64) *OrderProductUpdateOne {
	opuo.mutation.ResetAmount()
	opuo.mutation.SetAmount(i)
	return opuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (opuo *OrderProductUpdateOne) SetNillableAmount(i *int64) *OrderProductUpdateOne {
	if i != nil {
		opuo.SetAmount(*i)
	}
	return opuo
}

// AddAmount adds i to the "amount" field.
func (opuo *OrderProductUpdateOne) AddAmount(i int64) *OrderProductUpdateOne {
	opuo.mutation.AddAmount(i)
	return opuo
}

// SetPrice sets the "price" field.
func (opuo *OrderProductUpdateOne) SetPrice(i int64) *OrderProductUpdateOne {
	opuo.mutation.ResetPrice()
	opuo.mutation.SetPrice(i)
	return opuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (opuo *OrderProductUpdateOne) SetNillablePrice(i *int64) *OrderProductUpdateOne {
	if i != nil {
		opuo.SetPrice(*i)
	}
	return opuo
}

// AddPrice adds i to the "price" field.
func (opuo *OrderProductUpdateOne) AddPrice(i int64) *OrderProductUpdateOne {
	opuo.mutation.AddPrice(i)
	return opuo
}

// SetOrdersID sets the "orders" edge to the Order entity by ID.
func (opuo *OrderProductUpdateOne) SetOrdersID(id int64) *OrderProductUpdateOne {
	opuo.mutation.SetOrdersID(id)
	return opuo
}

// SetOrders sets the "orders" edge to the Order entity.
func (opuo *OrderProductUpdateOne) SetOrders(o *Order) *OrderProductUpdateOne {
	return opuo.SetOrdersID(o.ID)
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (opuo *OrderProductUpdateOne) SetProductsID(id int64) *OrderProductUpdateOne {
	opuo.mutation.SetProductsID(id)
	return opuo
}

// SetProducts sets the "products" edge to the Product entity.
func (opuo *OrderProductUpdateOne) SetProducts(p *Product) *OrderProductUpdateOne {
	return opuo.SetProductsID(p.ID)
}

// Mutation returns the OrderProductMutation object of the builder.
func (opuo *OrderProductUpdateOne) Mutation() *OrderProductMutation {
	return opuo.mutation
}

// ClearOrders clears the "orders" edge to the Order entity.
func (opuo *OrderProductUpdateOne) ClearOrders() *OrderProductUpdateOne {
	opuo.mutation.ClearOrders()
	return opuo
}

// ClearProducts clears the "products" edge to the Product entity.
func (opuo *OrderProductUpdateOne) ClearProducts() *OrderProductUpdateOne {
	opuo.mutation.ClearProducts()
	return opuo
}

// Where appends a list predicates to the OrderProductUpdate builder.
func (opuo *OrderProductUpdateOne) Where(ps ...predicate.OrderProduct) *OrderProductUpdateOne {
	opuo.mutation.Where(ps...)
	return opuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opuo *OrderProductUpdateOne) Select(field string, fields ...string) *OrderProductUpdateOne {
	opuo.fields = append([]string{field}, fields...)
	return opuo
}

// Save executes the query and returns the updated OrderProduct entity.
func (opuo *OrderProductUpdateOne) Save(ctx context.Context) (*OrderProduct, error) {
	opuo.defaults()
	return withHooks(ctx, opuo.sqlSave, opuo.mutation, opuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opuo *OrderProductUpdateOne) SaveX(ctx context.Context) *OrderProduct {
	node, err := opuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opuo *OrderProductUpdateOne) Exec(ctx context.Context) error {
	_, err := opuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opuo *OrderProductUpdateOne) ExecX(ctx context.Context) {
	if err := opuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opuo *OrderProductUpdateOne) defaults() {
	if _, ok := opuo.mutation.UpdatedAt(); !ok {
		v := orderproduct.UpdateDefaultUpdatedAt()
		opuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opuo *OrderProductUpdateOne) check() error {
	if v, ok := opuo.mutation.Amount(); ok {
		if err := orderproduct.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "OrderProduct.amount": %w`, err)}
		}
	}
	if v, ok := opuo.mutation.Price(); ok {
		if err := orderproduct.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "OrderProduct.price": %w`, err)}
		}
	}
	if _, ok := opuo.mutation.OrdersID(); opuo.mutation.OrdersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderProduct.orders"`)
	}
	if _, ok := opuo.mutation.ProductsID(); opuo.mutation.ProductsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderProduct.products"`)
	}
	return nil
}

func (opuo *OrderProductUpdateOne) sqlSave(ctx context.Context) (_node *OrderProduct, err error) {
	if err := opuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderproduct.Table, orderproduct.Columns, sqlgraph.NewFieldSpec(orderproduct.FieldID, field.TypeInt64))
	id, ok := opuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := opuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderproduct.FieldID)
		for _, f := range fields {
			if !orderproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orderproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := opuo.mutation.Amount(); ok {
		_spec.SetField(orderproduct.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := opuo.mutation.AddedAmount(); ok {
		_spec.AddField(orderproduct.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := opuo.mutation.Price(); ok {
		_spec.SetField(orderproduct.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := opuo.mutation.AddedPrice(); ok {
		_spec.AddField(orderproduct.FieldPrice, field.TypeInt64, value)
	}
	if opuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.OrdersTable,
			Columns: []string{orderproduct.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.OrdersTable,
			Columns: []string{orderproduct.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.ProductsTable,
			Columns: []string{orderproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderproduct.ProductsTable,
			Columns: []string{orderproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderProduct{config: opuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	opuo.mutation.done = true
	return _node, nil
}
