// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Address) Users(ctx context.Context) (*User, error) {
	result, err := a.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryUsers().Only(ctx)
	}
	return result, err
}

func (c *Cart) Users(ctx context.Context) (*User, error) {
	result, err := c.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryUsers().Only(ctx)
	}
	return result, err
}

func (c *Cart) Products(ctx context.Context) (*Product, error) {
	result, err := c.Edges.ProductsOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryProducts().Only(ctx)
	}
	return result, err
}

func (c *Category) Products(ctx context.Context) (result []*Product, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedProducts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ProductsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryProducts().All(ctx)
	}
	return result, err
}

func (o *Order) Users(ctx context.Context) (*User, error) {
	result, err := o.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryUsers().Only(ctx)
	}
	return result, err
}

func (pr *Product) Categories(ctx context.Context) (*Category, error) {
	result, err := pr.Edges.CategoriesOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryCategories().Only(ctx)
	}
	return result, err
}

func (pr *Product) Carts(ctx context.Context) (result []*Cart, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedCarts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.CartsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryCarts().All(ctx)
	}
	return result, err
}

func (u *User) Addresses(ctx context.Context) (result []*Address, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAddresses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.AddressesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAddresses().All(ctx)
	}
	return result, err
}

func (u *User) Carts(ctx context.Context) (result []*Cart, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCarts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CartsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCarts().All(ctx)
	}
	return result, err
}

func (u *User) Orders(ctx context.Context) (result []*Order, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedOrders(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.OrdersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryOrders().All(ctx)
	}
	return result, err
}
