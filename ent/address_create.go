// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blackPavlin/shop/ent/address"
	"github.com/blackPavlin/shop/ent/user"
)

// AddressCreate is the builder for creating a Address entity.
type AddressCreate struct {
	config
	mutation *AddressMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AddressCreate) SetCreatedAt(t time.Time) *AddressCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AddressCreate) SetNillableCreatedAt(t *time.Time) *AddressCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AddressCreate) SetUpdatedAt(t time.Time) *AddressCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AddressCreate) SetNillableUpdatedAt(t *time.Time) *AddressCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetUserID sets the "user_id" field.
func (ac *AddressCreate) SetUserID(i int64) *AddressCreate {
	ac.mutation.SetUserID(i)
	return ac
}

// SetCity sets the "city" field.
func (ac *AddressCreate) SetCity(s string) *AddressCreate {
	ac.mutation.SetCity(s)
	return ac
}

// SetCountry sets the "country" field.
func (ac *AddressCreate) SetCountry(s string) *AddressCreate {
	ac.mutation.SetCountry(s)
	return ac
}

// SetFlat sets the "flat" field.
func (ac *AddressCreate) SetFlat(i int) *AddressCreate {
	ac.mutation.SetFlat(i)
	return ac
}

// SetNillableFlat sets the "flat" field if the given value is not nil.
func (ac *AddressCreate) SetNillableFlat(i *int) *AddressCreate {
	if i != nil {
		ac.SetFlat(*i)
	}
	return ac
}

// SetHouse sets the "house" field.
func (ac *AddressCreate) SetHouse(i int) *AddressCreate {
	ac.mutation.SetHouse(i)
	return ac
}

// SetLetter sets the "letter" field.
func (ac *AddressCreate) SetLetter(s string) *AddressCreate {
	ac.mutation.SetLetter(s)
	return ac
}

// SetNillableLetter sets the "letter" field if the given value is not nil.
func (ac *AddressCreate) SetNillableLetter(s *string) *AddressCreate {
	if s != nil {
		ac.SetLetter(*s)
	}
	return ac
}

// SetPostcode sets the "postcode" field.
func (ac *AddressCreate) SetPostcode(i int) *AddressCreate {
	ac.mutation.SetPostcode(i)
	return ac
}

// SetStreet sets the "street" field.
func (ac *AddressCreate) SetStreet(s string) *AddressCreate {
	ac.mutation.SetStreet(s)
	return ac
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (ac *AddressCreate) SetUsersID(id int64) *AddressCreate {
	ac.mutation.SetUsersID(id)
	return ac
}

// SetUsers sets the "users" edge to the User entity.
func (ac *AddressCreate) SetUsers(u *User) *AddressCreate {
	return ac.SetUsersID(u.ID)
}

// Mutation returns the AddressMutation object of the builder.
func (ac *AddressCreate) Mutation() *AddressMutation {
	return ac.mutation
}

// Save creates the Address in the database.
func (ac *AddressCreate) Save(ctx context.Context) (*Address, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AddressCreate) SaveX(ctx context.Context) *Address {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AddressCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AddressCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AddressCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := address.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := address.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AddressCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Address.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Address.updated_at"`)}
	}
	if _, ok := ac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Address.user_id"`)}
	}
	if _, ok := ac.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Address.city"`)}
	}
	if v, ok := ac.mutation.City(); ok {
		if err := address.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Address.city": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Address.country"`)}
	}
	if v, ok := ac.mutation.Country(); ok {
		if err := address.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Address.country": %w`, err)}
		}
	}
	if _, ok := ac.mutation.House(); !ok {
		return &ValidationError{Name: "house", err: errors.New(`ent: missing required field "Address.house"`)}
	}
	if _, ok := ac.mutation.Postcode(); !ok {
		return &ValidationError{Name: "postcode", err: errors.New(`ent: missing required field "Address.postcode"`)}
	}
	if _, ok := ac.mutation.Street(); !ok {
		return &ValidationError{Name: "street", err: errors.New(`ent: missing required field "Address.street"`)}
	}
	if v, ok := ac.mutation.Street(); ok {
		if err := address.StreetValidator(v); err != nil {
			return &ValidationError{Name: "street", err: fmt.Errorf(`ent: validator failed for field "Address.street": %w`, err)}
		}
	}
	if _, ok := ac.mutation.UsersID(); !ok {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "Address.users"`)}
	}
	return nil
}

func (ac *AddressCreate) sqlSave(ctx context.Context) (*Address, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AddressCreate) createSpec() (*Address, *sqlgraph.CreateSpec) {
	var (
		_node = &Address{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(address.Table, sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(address.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(address.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := ac.mutation.Country(); ok {
		_spec.SetField(address.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := ac.mutation.Flat(); ok {
		_spec.SetField(address.FieldFlat, field.TypeInt, value)
		_node.Flat = value
	}
	if value, ok := ac.mutation.House(); ok {
		_spec.SetField(address.FieldHouse, field.TypeInt, value)
		_node.House = value
	}
	if value, ok := ac.mutation.Letter(); ok {
		_spec.SetField(address.FieldLetter, field.TypeString, value)
		_node.Letter = value
	}
	if value, ok := ac.mutation.Postcode(); ok {
		_spec.SetField(address.FieldPostcode, field.TypeInt, value)
		_node.Postcode = value
	}
	if value, ok := ac.mutation.Street(); ok {
		_spec.SetField(address.FieldStreet, field.TypeString, value)
		_node.Street = value
	}
	if nodes := ac.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.UsersTable,
			Columns: []string{address.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Address.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AddressCreate) OnConflict(opts ...sql.ConflictOption) *AddressUpsertOne {
	ac.conflict = opts
	return &AddressUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AddressCreate) OnConflictColumns(columns ...string) *AddressUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AddressUpsertOne{
		create: ac,
	}
}

type (
	// AddressUpsertOne is the builder for "upsert"-ing
	//  one Address node.
	AddressUpsertOne struct {
		create *AddressCreate
	}

	// AddressUpsert is the "OnConflict" setter.
	AddressUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AddressUpsert) SetUpdatedAt(v time.Time) *AddressUpsert {
	u.Set(address.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AddressUpsert) UpdateUpdatedAt() *AddressUpsert {
	u.SetExcluded(address.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AddressUpsert) SetUserID(v int64) *AddressUpsert {
	u.Set(address.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AddressUpsert) UpdateUserID() *AddressUpsert {
	u.SetExcluded(address.FieldUserID)
	return u
}

// SetCity sets the "city" field.
func (u *AddressUpsert) SetCity(v string) *AddressUpsert {
	u.Set(address.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressUpsert) UpdateCity() *AddressUpsert {
	u.SetExcluded(address.FieldCity)
	return u
}

// SetCountry sets the "country" field.
func (u *AddressUpsert) SetCountry(v string) *AddressUpsert {
	u.Set(address.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AddressUpsert) UpdateCountry() *AddressUpsert {
	u.SetExcluded(address.FieldCountry)
	return u
}

// SetFlat sets the "flat" field.
func (u *AddressUpsert) SetFlat(v int) *AddressUpsert {
	u.Set(address.FieldFlat, v)
	return u
}

// UpdateFlat sets the "flat" field to the value that was provided on create.
func (u *AddressUpsert) UpdateFlat() *AddressUpsert {
	u.SetExcluded(address.FieldFlat)
	return u
}

// AddFlat adds v to the "flat" field.
func (u *AddressUpsert) AddFlat(v int) *AddressUpsert {
	u.Add(address.FieldFlat, v)
	return u
}

// ClearFlat clears the value of the "flat" field.
func (u *AddressUpsert) ClearFlat() *AddressUpsert {
	u.SetNull(address.FieldFlat)
	return u
}

// SetHouse sets the "house" field.
func (u *AddressUpsert) SetHouse(v int) *AddressUpsert {
	u.Set(address.FieldHouse, v)
	return u
}

// UpdateHouse sets the "house" field to the value that was provided on create.
func (u *AddressUpsert) UpdateHouse() *AddressUpsert {
	u.SetExcluded(address.FieldHouse)
	return u
}

// AddHouse adds v to the "house" field.
func (u *AddressUpsert) AddHouse(v int) *AddressUpsert {
	u.Add(address.FieldHouse, v)
	return u
}

// SetLetter sets the "letter" field.
func (u *AddressUpsert) SetLetter(v string) *AddressUpsert {
	u.Set(address.FieldLetter, v)
	return u
}

// UpdateLetter sets the "letter" field to the value that was provided on create.
func (u *AddressUpsert) UpdateLetter() *AddressUpsert {
	u.SetExcluded(address.FieldLetter)
	return u
}

// ClearLetter clears the value of the "letter" field.
func (u *AddressUpsert) ClearLetter() *AddressUpsert {
	u.SetNull(address.FieldLetter)
	return u
}

// SetPostcode sets the "postcode" field.
func (u *AddressUpsert) SetPostcode(v int) *AddressUpsert {
	u.Set(address.FieldPostcode, v)
	return u
}

// UpdatePostcode sets the "postcode" field to the value that was provided on create.
func (u *AddressUpsert) UpdatePostcode() *AddressUpsert {
	u.SetExcluded(address.FieldPostcode)
	return u
}

// AddPostcode adds v to the "postcode" field.
func (u *AddressUpsert) AddPostcode(v int) *AddressUpsert {
	u.Add(address.FieldPostcode, v)
	return u
}

// SetStreet sets the "street" field.
func (u *AddressUpsert) SetStreet(v string) *AddressUpsert {
	u.Set(address.FieldStreet, v)
	return u
}

// UpdateStreet sets the "street" field to the value that was provided on create.
func (u *AddressUpsert) UpdateStreet() *AddressUpsert {
	u.SetExcluded(address.FieldStreet)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AddressUpsertOne) UpdateNewValues() *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(address.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Address.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AddressUpsertOne) Ignore() *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressUpsertOne) DoNothing() *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressCreate.OnConflict
// documentation for more info.
func (u *AddressUpsertOne) Update(set func(*AddressUpsert)) *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AddressUpsertOne) SetUpdatedAt(v time.Time) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateUpdatedAt() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *AddressUpsertOne) SetUserID(v int64) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateUserID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateUserID()
	})
}

// SetCity sets the "city" field.
func (u *AddressUpsertOne) SetCity(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateCity() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCity()
	})
}

// SetCountry sets the "country" field.
func (u *AddressUpsertOne) SetCountry(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateCountry() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCountry()
	})
}

// SetFlat sets the "flat" field.
func (u *AddressUpsertOne) SetFlat(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetFlat(v)
	})
}

// AddFlat adds v to the "flat" field.
func (u *AddressUpsertOne) AddFlat(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.AddFlat(v)
	})
}

// UpdateFlat sets the "flat" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateFlat() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateFlat()
	})
}

// ClearFlat clears the value of the "flat" field.
func (u *AddressUpsertOne) ClearFlat() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearFlat()
	})
}

// SetHouse sets the "house" field.
func (u *AddressUpsertOne) SetHouse(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetHouse(v)
	})
}

// AddHouse adds v to the "house" field.
func (u *AddressUpsertOne) AddHouse(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.AddHouse(v)
	})
}

// UpdateHouse sets the "house" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateHouse() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateHouse()
	})
}

// SetLetter sets the "letter" field.
func (u *AddressUpsertOne) SetLetter(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetLetter(v)
	})
}

// UpdateLetter sets the "letter" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateLetter() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateLetter()
	})
}

// ClearLetter clears the value of the "letter" field.
func (u *AddressUpsertOne) ClearLetter() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearLetter()
	})
}

// SetPostcode sets the "postcode" field.
func (u *AddressUpsertOne) SetPostcode(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetPostcode(v)
	})
}

// AddPostcode adds v to the "postcode" field.
func (u *AddressUpsertOne) AddPostcode(v int) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.AddPostcode(v)
	})
}

// UpdatePostcode sets the "postcode" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdatePostcode() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdatePostcode()
	})
}

// SetStreet sets the "street" field.
func (u *AddressUpsertOne) SetStreet(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetStreet(v)
	})
}

// UpdateStreet sets the "street" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateStreet() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateStreet()
	})
}

// Exec executes the query.
func (u *AddressUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AddressUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AddressUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AddressCreateBulk is the builder for creating many Address entities in bulk.
type AddressCreateBulk struct {
	config
	builders []*AddressCreate
	conflict []sql.ConflictOption
}

// Save creates the Address entities in the database.
func (acb *AddressCreateBulk) Save(ctx context.Context) ([]*Address, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Address, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AddressCreateBulk) SaveX(ctx context.Context) []*Address {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AddressCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AddressCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Address.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AddressCreateBulk) OnConflict(opts ...sql.ConflictOption) *AddressUpsertBulk {
	acb.conflict = opts
	return &AddressUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AddressCreateBulk) OnConflictColumns(columns ...string) *AddressUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AddressUpsertBulk{
		create: acb,
	}
}

// AddressUpsertBulk is the builder for "upsert"-ing
// a bulk of Address nodes.
type AddressUpsertBulk struct {
	create *AddressCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AddressUpsertBulk) UpdateNewValues() *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(address.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AddressUpsertBulk) Ignore() *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressUpsertBulk) DoNothing() *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressCreateBulk.OnConflict
// documentation for more info.
func (u *AddressUpsertBulk) Update(set func(*AddressUpsert)) *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AddressUpsertBulk) SetUpdatedAt(v time.Time) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateUpdatedAt() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *AddressUpsertBulk) SetUserID(v int64) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateUserID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateUserID()
	})
}

// SetCity sets the "city" field.
func (u *AddressUpsertBulk) SetCity(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateCity() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCity()
	})
}

// SetCountry sets the "country" field.
func (u *AddressUpsertBulk) SetCountry(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateCountry() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCountry()
	})
}

// SetFlat sets the "flat" field.
func (u *AddressUpsertBulk) SetFlat(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetFlat(v)
	})
}

// AddFlat adds v to the "flat" field.
func (u *AddressUpsertBulk) AddFlat(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.AddFlat(v)
	})
}

// UpdateFlat sets the "flat" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateFlat() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateFlat()
	})
}

// ClearFlat clears the value of the "flat" field.
func (u *AddressUpsertBulk) ClearFlat() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearFlat()
	})
}

// SetHouse sets the "house" field.
func (u *AddressUpsertBulk) SetHouse(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetHouse(v)
	})
}

// AddHouse adds v to the "house" field.
func (u *AddressUpsertBulk) AddHouse(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.AddHouse(v)
	})
}

// UpdateHouse sets the "house" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateHouse() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateHouse()
	})
}

// SetLetter sets the "letter" field.
func (u *AddressUpsertBulk) SetLetter(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetLetter(v)
	})
}

// UpdateLetter sets the "letter" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateLetter() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateLetter()
	})
}

// ClearLetter clears the value of the "letter" field.
func (u *AddressUpsertBulk) ClearLetter() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearLetter()
	})
}

// SetPostcode sets the "postcode" field.
func (u *AddressUpsertBulk) SetPostcode(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetPostcode(v)
	})
}

// AddPostcode adds v to the "postcode" field.
func (u *AddressUpsertBulk) AddPostcode(v int) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.AddPostcode(v)
	})
}

// UpdatePostcode sets the "postcode" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdatePostcode() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdatePostcode()
	})
}

// SetStreet sets the "street" field.
func (u *AddressUpsertBulk) SetStreet(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetStreet(v)
	})
}

// UpdateStreet sets the "street" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateStreet() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateStreet()
	})
}

// Exec executes the query.
func (u *AddressUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AddressCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
