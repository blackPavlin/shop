// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package cart is a generated GoMock package.
package cart

import (
	context "context"
	reflect "reflect"

	entities "github.com/blackPavlin/shop/app/internal/core/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// AppendProduct mocks base method.
func (m *MockCartRepository) AppendProduct(ctx context.Context, userID entities.UserID, product *entities.CartProduct) (*entities.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendProduct", ctx, userID, product)
	ret0, _ := ret[0].(*entities.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendProduct indicates an expected call of AppendProduct.
func (mr *MockCartRepositoryMockRecorder) AppendProduct(ctx, userID, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendProduct", reflect.TypeOf((*MockCartRepository)(nil).AppendProduct), ctx, userID, product)
}

// Create mocks base method.
func (m *MockCartRepository) Create(ctx context.Context, cart *entities.Cart) (entities.CartID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, cart)
	ret0, _ := ret[0].(entities.CartID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCartRepositoryMockRecorder) Create(ctx, cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCartRepository)(nil).Create), ctx, cart)
}

// DeleteProductByID mocks base method.
func (m *MockCartRepository) DeleteProductByID(ctx context.Context, userID entities.UserID, id entities.ProductID) (*entities.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductByID", ctx, userID, id)
	ret0, _ := ret[0].(*entities.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProductByID indicates an expected call of DeleteProductByID.
func (mr *MockCartRepositoryMockRecorder) DeleteProductByID(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductByID", reflect.TypeOf((*MockCartRepository)(nil).DeleteProductByID), ctx, userID, id)
}

// DeleteProducts mocks base method.
func (m *MockCartRepository) DeleteProducts(ctx context.Context, userID entities.UserID) (*entities.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProducts", ctx, userID)
	ret0, _ := ret[0].(*entities.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProducts indicates an expected call of DeleteProducts.
func (mr *MockCartRepositoryMockRecorder) DeleteProducts(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProducts", reflect.TypeOf((*MockCartRepository)(nil).DeleteProducts), ctx, userID)
}

// FindByUserID mocks base method.
func (m *MockCartRepository) FindByUserID(ctx context.Context, userID entities.UserID) (*entities.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].(*entities.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockCartRepositoryMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockCartRepository)(nil).FindByUserID), ctx, userID)
}

// UpdateProduct mocks base method.
func (m *MockCartRepository) UpdateProduct(ctx context.Context, userID entities.UserID, product *entities.CartProduct) (*entities.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, userID, product)
	ret0, _ := ret[0].(*entities.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockCartRepositoryMockRecorder) UpdateProduct(ctx, userID, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockCartRepository)(nil).UpdateProduct), ctx, userID, product)
}
